// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum Role {
  SUPERADMIN
  ADMIN
  EDITOR
  AUTHOR
  CUSTOMER
  USER
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  ON_BACKORDER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  REJECTED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// =============================================================================
// CORE SETTINGS
// =============================================================================

model Setting {
  id           Int         @id @default(autoincrement())
  settingKey   String      @unique @map("setting_key") @db.VarChar(100)
  settingValue String?     @map("setting_value") @db.Text
  settingType  SettingType @default(STRING) @map("setting_type")
  description  String?     @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("settings")
}

// =============================================================================
// AUTHENTICATION SYSTEM
// =============================================================================

model UserRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  users       UserRoleAssignment[]

  @@map("roles")
}

model User {
  id                       Int      @id @default(autoincrement())
  username                 String   @unique @db.VarChar(50)
  email                    String   @unique @db.VarChar(100)
  passwordHash             String?  @map("password_hash")
  firstName                String?  @map("first_name") @db.VarChar(50)
  lastName                 String?  @map("last_name") @db.VarChar(50)
  avatar                   String?
  bio                      String?  @db.Text
  phone                    String?  @db.VarChar(20)
  address                  String?  @db.Text
  city                     String?  @db.VarChar(50)
  state                    String?  @db.VarChar(50)
  country                  String?  @db.VarChar(50)
  postalCode               String?  @map("postal_code") @db.VarChar(20)
  emailVerified            Boolean  @default(false) @map("email_verified")
  emailVerificationToken   String?  @map("email_verification_token") @db.VarChar(100)
  passwordResetToken       String?  @map("password_reset_token") @db.VarChar(100)
  passwordResetExpires     DateTime? @map("password_reset_expires")
  lastLogin                DateTime? @map("last_login")
  isActive                 Boolean  @default(true) @map("is_active")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // NextAuth compatibility fields
  name                     String?
  image                    String?
  emailVerifiedNextAuth    DateTime? @map("emailVerified")

  // Relations
  roles                    UserRoleAssignment[]
  accounts                 Account[]
  sessions                 Session[]
  uploadedMedia            Media[] @relation("UploadedBy")
  createdProducts          Product[] @relation("CreatedBy")
  blogs                    Blog[] @relation("Author")
  news                     News[] @relation("Author")
  blogComments             BlogComment[]
  productReviews           ProductReview[]
  orders                   Order[]
  cartItems                CartItem[]
  assignedUserRoles        UserRoleAssignment[] @relation("AssignedBy")
  createdProductComponents ProductComponent[] @relation("CreatedBy")
  forumPosts              ForumPost[]
  forumComments           ForumComment[]

  @@index([username])
  @@index([email])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@map("users")
}

model UserRoleAssignment {
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy Int?     @map("assigned_by")

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: SetNull)

  @@id([userId, roleId]) @map("user_id_role_id")
  @@map("user_roles")
}

// =============================================================================
// NEXTAUTH MODELS
// =============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// MEDIA MANAGEMENT
// =============================================================================

model Media {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String   @map("original_name")
  filePath     String   @map("file_path") @db.VarChar(500)
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type") @db.VarChar(100)
  altText      String?  @map("alt_text")
  caption      String?  @db.Text
  uploadedBy   Int?     @map("uploaded_by")
  isPublic     Boolean  @default(true) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  uploadedByUser       User?           @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)
  categoryImages       Category[]      @relation("CategoryImage")
  productFeaturedImages Product[]      @relation("FeaturedImage")
  productImages        ProductImage[]
  blogFeaturedImages   Blog[]          @relation("BlogFeaturedImage")
  newsFeaturedImages   News[]          @relation("NewsFeaturedImage")

  @@index([mimeType])
  @@index([uploadedBy])
  @@map("media")
}

// =============================================================================
// CATEGORIES AND TAGS
// =============================================================================

model Category {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(100)
  slug            String   @unique @db.VarChar(100)
  description     String?  @db.Text
  parentId        Int?     @map("parent_id")
  imageId         Int?     @map("image_id")
  metaTitle       String?  @map("meta_title") @db.VarChar(200)
  metaDescription String?  @map("meta_description") @db.Text
  sortOrder       Int      @default(0) @map("sort_order")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  parent           Category?          @relation("CategoryParent", fields: [parentId], references: [id], onDelete: SetNull)
  children         Category[]         @relation("CategoryParent")
  image            Media?             @relation("CategoryImage", fields: [imageId], references: [id], onDelete: SetNull)
  productCategories ProductCategory[]
  blogs            Blog[]

  @@index([slug])
  @@index([parentId])
  @@index([sortOrder])
  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  color     String   @default("#000000") @db.VarChar(7)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  blogTags BlogTag[]
  newsTags NewsTag[]

  @@index([slug])
  @@map("tags")
}

// =============================================================================
// PRODUCTS SYSTEM
// =============================================================================

model Product {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(200)
  slug             String        @unique @db.VarChar(200)
  description      String?       @db.Text
  shortDescription String?       @map("short_description") @db.VarChar(500)
  sku              String?       @unique @db.VarChar(100)
  price            Decimal       @db.Decimal(10, 2)
  salePrice        Decimal?      @map("sale_price") @db.Decimal(10, 2)
  costPrice        Decimal?      @map("cost_price") @db.Decimal(10, 2)
  stockQuantity    Int           @default(0) @map("stock_quantity")
  manageStock      Boolean       @default(true) @map("manage_stock")
  stockStatus      StockStatus   @default(IN_STOCK) @map("stock_status")
  weight           Decimal?      @db.Decimal(8, 2)
  dimensions       String?       @db.VarChar(100)
  featuredImageId  Int?          @map("featured_image_id")
  gallery          Json?
  attributes       Json?
  metaTitle        String?       @map("meta_title") @db.VarChar(200)
  metaDescription  String?       @map("meta_description") @db.Text
  status           ContentStatus @default(DRAFT)
  featured         Boolean       @default(false)
  createdBy        Int?          @map("created_by")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  featuredImage        Media?              @relation("FeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  createdByUser        User?               @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  productCategories    ProductCategory[]
  productImages        ProductImage[]
  productReviews       ProductReview[]
  productComponents    ProductComponent[]
  orderItems           OrderItem[]
  cartItems            CartItem[]

  @@index([slug])
  @@index([sku])
  @@index([status])
  @@index([featured])
  @@index([price])
  @@index([stockStatus])
  @@fulltext([name, description, shortDescription])
  @@map("products")
}

model ProductCategory {
  productId  Int @map("product_id")
  categoryId Int @map("category_id")

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  productId  Int     @map("product_id")
  mediaId    Int     @map("media_id")
  sortOrder  Int     @default(0) @map("sort_order")
  isFeatured Boolean @default(false) @map("is_featured")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sortOrder])
  @@map("product_images")
}

model ProductReview {
  id               Int          @id @default(autoincrement())
  productId        Int          @map("product_id")
  userId           Int?         @map("user_id")
  rating           Int
  title            String?      @db.VarChar(200)
  review           String?      @db.Text
  reviewerName     String       @map("reviewer_name") @db.VarChar(100)
  reviewerEmail    String       @map("reviewer_email") @db.VarChar(100)
  status           ReviewStatus @default(PENDING)
  verifiedPurchase Boolean      @default(false) @map("verified_purchase")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([status])
  @@index([rating])
  @@map("product_reviews")
}

model ProductComponent {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  componentType String   @map("component_type") @db.VarChar(100)
  componentName String   @map("component_name") @db.VarChar(200)
  componentTitle String? @map("component_title")
  description   String?  @db.Text
  options       Json?
  sortOrder     Int      @default(0) @map("sort_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdBy     Int?     @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdByUser User?   @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([componentType])
  @@index([sortOrder])
  @@index([isActive])
  @@map("product_components")
}

// =============================================================================
// E-COMMERCE ORDERS
// =============================================================================

model Order {
  id                   Int           @id @default(autoincrement())
  orderNumber          String        @unique @map("order_number") @db.VarChar(50)
  userId               Int?          @map("user_id")
  status               OrderStatus   @default(PENDING)
  totalAmount          Decimal       @map("total_amount") @db.Decimal(10, 2)
  subtotal             Decimal       @db.Decimal(10, 2)
  taxAmount            Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount       Decimal       @default(0) @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount       Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  paymentMethod        String?       @map("payment_method") @db.VarChar(50)
  paymentStatus        PaymentStatus @default(PENDING) @map("payment_status")
  paymentId            String?       @map("payment_id") @db.VarChar(100)
  
  // Billing information
  billingFirstName     String        @map("billing_first_name") @db.VarChar(50)
  billingLastName      String        @map("billing_last_name") @db.VarChar(50)
  billingEmail         String        @map("billing_email") @db.VarChar(100)
  billingPhone         String?       @map("billing_phone") @db.VarChar(20)
  billingAddress       String        @map("billing_address")
  billingCity          String        @map("billing_city") @db.VarChar(50)
  billingState         String        @map("billing_state") @db.VarChar(50)
  billingPostalCode    String        @map("billing_postal_code") @db.VarChar(20)
  billingCountry       String        @map("billing_country") @db.VarChar(50)
  
  // Shipping information
  shippingFirstName    String?       @map("shipping_first_name") @db.VarChar(50)
  shippingLastName     String?       @map("shipping_last_name") @db.VarChar(50)
  shippingAddress      String?       @map("shipping_address")
  shippingCity         String?       @map("shipping_city") @db.VarChar(50)
  shippingState        String?       @map("shipping_state") @db.VarChar(50)
  shippingPostalCode   String?       @map("shipping_postal_code") @db.VarChar(20)
  shippingCountry      String?       @map("shipping_country") @db.VarChar(50)
  
  notes                String?       @db.Text
  shippedAt            DateTime?     @map("shipped_at")
  deliveredAt          DateTime?     @map("delivered_at")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]

  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@map("orders")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  productId   Int     @map("product_id")
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  productName String  @map("product_name") @db.VarChar(200)
  productSku  String? @map("product_sku") @db.VarChar(100)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  sessionId String?  @map("session_id") @db.VarChar(100)
  productId Int      @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([productId])
  @@map("cart_items")
}

// =============================================================================
// NEWS SYSTEM
// =============================================================================

model News {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  excerpt         String?       @db.Text
  content         String?       @db.LongText
  featuredImageId Int?          @map("featured_image_id")
  authorId        Int?          @map("author_id")
  status          ContentStatus @default(DRAFT)
  publishedAt     DateTime?     @map("published_at")
  isFeatured      Boolean       @default(false) @map("is_featured")
  isBreaking      Boolean       @default(false) @map("is_breaking")
  viewCount       Int           @default(0) @map("view_count")
  metaTitle       String?       @map("meta_title") @db.VarChar(200)
  metaDescription String?       @map("meta_description") @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  featuredImage Media?    @relation("NewsFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  author        User?     @relation("Author", fields: [authorId], references: [id], onDelete: SetNull)
  newsTags      NewsTag[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([isFeatured])
  @@index([isBreaking])
  @@index([authorId])
  @@fulltext([title, excerpt, content])
  @@map("news")
}

model NewsTag {
  newsId Int @map("news_id")
  tagId  Int @map("tag_id")

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([newsId, tagId])
  @@map("news_tags")
}

// =============================================================================
// BLOG SYSTEM
// =============================================================================

model Blog {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  excerpt         String?       @db.Text
  content         String?       @db.LongText
  featuredImageId Int?          @map("featured_image_id")
  authorId        Int?          @map("author_id")
  categoryId      Int?          @map("category_id")
  status          ContentStatus @default(DRAFT)
  publishedAt     DateTime?     @map("published_at")
  isFeatured      Boolean       @default(false) @map("is_featured")
  allowComments   Boolean       @default(true) @map("allow_comments")
  viewCount       Int           @default(0) @map("view_count")
  readingTime     Int?          @map("reading_time")
  metaTitle       String?       @map("meta_title") @db.VarChar(200)
  metaDescription String?       @map("meta_description") @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  featuredImage Media?        @relation("BlogFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  author        User?         @relation("Author", fields: [authorId], references: [id], onDelete: SetNull)
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  blogTags      BlogTag[]
  blogComments  BlogComment[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([isFeatured])
  @@index([authorId])
  @@index([categoryId])
  @@fulltext([title, excerpt, content])
  @@map("blogs")
}

model BlogTag {
  blogId Int @map("blog_id")
  tagId  Int @map("tag_id")

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogId, tagId])
  @@map("blog_tags")
}

model BlogComment {
  id            Int           @id @default(autoincrement())
  blogId        Int           @map("blog_id")
  userId        Int?          @map("user_id")
  parentId      Int?          @map("parent_id")
  authorName    String        @map("author_name") @db.VarChar(100)
  authorEmail   String        @map("author_email") @db.VarChar(100)
  authorWebsite String?       @map("author_website") @db.VarChar(200)
  content       String        @db.Text
  status        CommentStatus @default(PENDING)
  ipAddress     String?       @map("ip_address") @db.VarChar(45)
  userAgent     String?       @map("user_agent") @db.Text
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  blog     Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user     User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent   BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  BlogComment[] @relation("CommentReplies")

  @@index([blogId])
  @@index([status])
  @@index([parentId])
  @@map("blog_comments")
}

// =============================================================================
// FORUM SYSTEM (EXISTING)
// =============================================================================

model ForumPost {
  id        Int            @id @default(autoincrement())
  title     String
  content   String         @db.Text
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  userId    Int            @map("user_id")
  
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  ForumComment[]

  @@map("forum_posts")
}

model ForumComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

// =============================================================================
// DEALER SYSTEM (EXISTING)
// =============================================================================

model Dealer {
  id        Int      @id @default(autoincrement())
  name      String
  address   String   @db.Text
  phone     String?
  email     String?
  website   String?
  latitude  Float?
  longitude Float?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("dealers")
}